#Overview
Earlier, we have learned how to create and write new files. Python also has the
has the ability to organize pre-existing files in your directory, adding to its
powerful scripting capabilities. For this project, we will tackle how to 
automatically back-up our files at will.

###Prior Setup
With working with files, it is important to know the extensions of a file
(.txt, .pdf, .doc, .jpg, etc.)

For computers running Windows, file extensions may be hidden. To show them, go
to Start -> Control Panel -> Appearance and Personalization -> Folder Options.
On the pop-up dialog, go to View -> Advanced Settings, and uncheck "Hide
extensions for known filetypes".

#New Concepts
### The shutil Module
The shutil, or shell utilities, module has functions that allow users to copy,
move, and delete files. We will need to import it with "import shutil"

###Copying files and Folders
shutil.copy(source, destination) will copy a file from the source to the 
destination. If destination path ends with a filename, the copied file will
have that name. If the destination path ends with a folder name, the copied 
file will be the same as the original. The function will return a string of
the path of the copied file.
shutil.copytree(source, destination) is similar to shutil.copy() but will also
copy folders.

###Moving and Renaming Files
In the command line, moving and renaming files are done with the same command.
The way one can see this is that when you are renaming a file, you are actually
moving the file from one name to another name. This is done with the function,
shutil.move(source, destination).

### Deleting Files and Folders
os.unlink(path) will delete the file at path.
os.rmdir(path) will delete the folder at path. This will only delete an empty
folder
shutil.rmtree(path) will remove the folder at path and everything it contains

Example
```python
# Deletes any file that ends in .txt
import os
for filename in os.listdir():
  if filename.endswith('.txt'):
    print(filename)
    os.unlink(filename)
```

### Walking a Directory Tree
When you want to visit every single file and folder in a directory, use
os.walk(path). 

os.walk() returns three values, 1.) A string of the current
folder's name, 2.) A list of strings of the folders in the current folder, 3.)
A list of strings of the files in the current folder. This allows us to use 
three variables: folderName, subfolders, and filenames to store these three
values. We can also use subfolders and filenames in their own for loops since
they are lists.

```python
# Prints every single file and folder in directory
import os

for folderName, subfolders, filenames in os.walk(os.path.abspath('.')):
  print('The current folder is ' + foldername)

  for subfolder in subfolders:
    print('SUBFOLDER OF ' + folderName + ': ' + subfolder)
  for filename in filenames:
    print('FILE INSIDE ' + folderName + ': ' + filename)
  print('')
```

## Compressing Files with the zipfile Module
A ZIP file is an archive file that allows the storage of multiple files and
folders into one. 

### Reading ZIP Files
To read a ZIP file, we must create a ZipFile object first. This is similar to 
the File object created for file input/output. To create a ZipFile object, call
zipfile.ZipFile('name.zip'). zipfile is the name of the Python module. Create
a zipfile called "example.zip" to test this program and try it out with the 
Python interactive shell
```python
import zipfile, os
exampleZip = zipfile.ZipFile('example.zip')
exampleZip.namelist()
fileInfo = exampleZip.getinfo('some_file.txt')
fileInfo.file_size
fileInfo.compress_size
print('Compressed file is %sx smaller!' % (round(fileInfo.file_size / fileInfo.compress_size, 2)))
exampleZip.close()
```
